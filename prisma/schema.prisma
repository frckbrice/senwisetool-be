// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


 generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

// enable postgis to store geographical points to the database
datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [postgis]
}


enum Role {
  PDG
  AGENT
  ADG
  AUDITOR
  HR
  IT
  SALES
  IT_SUPPORT
}

enum ProjectStatus {
  DRAFT
  ARCHIVED
  ACTIVE
  DELETED
}

enum TypeProject {
  INITIAL_INSPECTION
  EXTERNAL_INSPECTION
  AUTO_EVALUATION
  MAPPING
}

enum UserStatus {
  FARMER
  EMPLOYEE
  AUDITOR
}

model User {
  id           String    @id @default(cuid())
  email        String    @unique
  username     String
  password     String
  role         Role     @default(PDG)

  first_name    String
  last_name     String
  phone_number  String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  profileUrls   String
  company_id    String
  famer_attached_contract_url   String

  company       Company @relation(fields: [company_id], references: [id])
  status        UserStatus
  projectAudit  Project_audit[]
  farm          Farm[] 
  receipt       Receipt?
  market_audit  Market_audit[]
  training_audits Company_training_audit[]
}

model Company {
  id  String @id @default(cuid())
  name  String
  slug  String
  country String
  email  String @unique
  logo  String @unique

  payment_mode String
  paypal_id String @unique
  sector_of_activity String 
  website  String ?
  address  String 

  phone_number  String
  city  String
  description String

  users  User[]
  projects Project[]
  campaign Campaign[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  trainings Training[]
  subscription Subscription[]
  markets Market[]
  
}

model Project {
  id  String @id @default(cuid())
  type TypeProject
  slug  String

  company_id   String
  title  String
  description  String
  sector_activity String
  country  String
  status ProjectStatus

  start_date  DateTime
  end_date  DateTime
  project_structure Json?    @default("{}")  @db.JsonB

  archived Boolean @default(false)
  draft Boolean @default(false)
  projectAudit Project_audit[]
  Company     Company @relation(fields: [company_id], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted_at DateTime @updatedAt
  archived_at DateTime @updatedAt
  draft_at DateTime @updatedAt
}

model Campaign {
  id  String @id @default(cuid())
  name  String
  description  String

  start_date  DateTime
  end_date  DateTime
  companyId   String
  Company     Company @relation(fields: [companyId], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  stockCampaigns Campaign_stock[]
}

model Campaign_stock {
  id  String @id @default(cuid())
  quantity  Int
  weight  Int
  unit_of_mesure String
  campaign_id  String
  company_id   String

  projectId   Campaign @relation(fields: [campaign_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Collector_agent {
  id String @id @default(cuid())
  name String
  code String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  companyId String
}

model Inspection_data {
  id String @id @default(cuid())
  project_id String
  collected_by String
  project_data_url String

  project_data   Json ?  @default("{}")  @db.JsonB
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  collected_at DateTime @default(now())
}

model Training_participant {
  id String @id @default(cuid())
  first_name String
  last_name String
  signature String
  email String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  training_id String
  training Training @relation(fields: [training_id], references: [id])
}

model Training {
  id String @id @default(cuid())
  theme String
  modules String
  start_date DateTime
  end_date DateTime
  company_id  String
  training_picture_url String[]
  training_attendance_sheet_url String
  location String
  company Company @relation(fields: [company_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  participants Training_participant[]
  training_audits Company_training_audit[]
}

model Project_audit {
  id String @id @default(cuid())
  project_id String
  user_id String
  type_of_project TypeProject
  user User @relation(fields: [user_id], references: [id])
  project Project @relation(fields: [project_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Farm {
  id String @id @default(cuid())
  location Json ?  @default("{}")  @db.JsonB
  farmer_id String 

  village String
  creation_date DateTime
  division String
  council String
  farm_image_url String
  user User @relation(fields: [farmer_id], references: [id])
  
  mapping_coodinates Farm_coordinates[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

//TODO: check the real data structure to store the geoPoints.
model Farm_coordinates{
  id String @id @default(cuid())
  estimate_area Float

  mapping_date DateTime
  farm_id String
  located_at Json ?  @default("{}")  @db.JsonB

  coordinates Json ?  @default("{}")  @db.JsonB
  collected_by String
  farm Farm @relation(fields: [farm_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Subscription {
  id String @id @default(cuid())
  price_id String
  company_id String

  start_date DateTime
  end_date DateTime
  status String
  description String
  
  payment_mode String
  auto_renewal String
  billing_cycle String

  company Company @relation(fields: [company_id], references: [id])
  price Price_plan @relation(fields: [price_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Price_plan {
  id String @id @default(cuid())
  active Boolean
price String
  currency String
  name String

  duration String
  benefits String[]
 renewal_options String
  cancellation_policy String[]
  subscription Subscription[]

  price_plan_requiement Price_plan_requiement[]
}


model Requirement {
  id String @id @default(cuid())
  label String
  title String
  content Json ?  @default("{}")  @db.JsonB
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  price_plan_requiement Price_plan_requiement[]
  // required_norm String
  // number_of_requirements Int
  // number_of_applicable_requirements Int
  // number_of_non_appplicable_requirements Int 
  // percentage_applicable Int
}

model Price_plan_requiement {
  id String @id @default(cuid())
  req_id String
  price_plan_id String
  requirement Requirement @relation(fields: [req_id], references: [id])
  price_plan Price_plan @relation(fields: [price_plan_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Market_audit {
  id String @id @default(cuid())
  user_id String
  market_id String
  user User @relation(fields: [user_id], references: [id])
  market Market @relation(fields: [market_id], references: [id])
  date DateTime
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Market {
  id String @id @default(cuid())
  company_id String
  start_date DateTime
  end_date DateTime
  market_number Int

  label String
  description String
  location String
  market_type String
  
  company Company @relation(fields: [company_id], references: [id])
  borderau_vente_url String
  bon_entree_magazin_url String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  market_audit Market_audit[]
  transaction Transaction[]
  receipts Receipt[]
}

model Receipt {
  id String @id @default(cuid())
  marketId String
  farmerId String @unique
  user User @relation(fields: [farmerId], references: [id])
  market Market @relation(fields: [marketId], references: [id])
  receipt_date DateTime
  product_name String
  quantity_in_bags Int
  unit_amount Float
  currency String
  section_or_village String
  net_weight_in_kg Float
  humidity_of_product String
  total_amount Float
  net_weight_sale Int
  refraction_humidity_or_quality String
  prelevement_statutaire Int 
  net_paid Int 
  farmer_signature String
  company_signature String
  farmer_picture String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  receipt_number String
  receipt_url String
  receipt_pdf_url String
}

model Transaction {
  id String @id @default(cuid())
  level_of_traceability String
  driver_name String
  quantity Int 
  net_declared_weight_in_kg Float
  humidity Int
  total_quantity_of_bags Int 
  marketId String @unique
  receiver_name String
  date DateTime @default(now())
  market Market @relation(fields: [marketId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  min_commerce_verificator_agent_name String
   min_commerce_verificator_agent_signature String
  digital_signature_driver String
  digital_signature_sender String
  product_quality String
  vehicule_immatriculation_number String
}

model Company_training_audit {
  id String @id @default(cuid())
  user_id String
  user User @relation(fields: [user_id], references: [id])
  training_id String
  training Training @relation(fields: [training_id], references: [id])
}
