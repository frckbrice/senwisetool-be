// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init




//TODO: Check if possible to enable postgis to store geographical points to the database 
// this is for future use of geo data for analysis and calculations: service to customers.

 generator client {
  provider        = "prisma-client-js"
  // previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  // extensions = [postgis]
}


enum Role {
  FARMER
  PDG 
  EMPLOYEE
  AGENT
  ADG
  AUDITOR
  SALES
  IT_SUPPORT
  
}

enum ProjectStatus {
  DRAFT
  ARCHIVED
  ACTIVE
  DELETED
}

enum TypeProject {
  INITIAL_INSPECTION
  EXTERNAL_INSPECTION
  AUTO_EVALUATION
  MAPPING
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BANNED
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
  SUSPENDED
  APPROVAL_PENDING
  EXPIRED
  GRACE_PERIOD
}

enum PaymentMethod {
  CARD 
  PAYPAL 
  E_CHEQUE
  CASH
  INSTANT_BANK_TRANSFER
}

enum ProductName {
  BRONZE
  SILVER
  GOLD
}

enum PlanStatus {
  ON 
  OFF
  EXPIRED
}

enum CompanyStatus {
  ACTIVE
  INACTIVE
  EXPIRED
}


model User {
  id           String    @id @default(cuid())
  username     String?
  email        String?  @unique
 
  password     String?
  role         Role     @default(PDG)

  first_name    String
  last_name     String ?
  phone_number  String ?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  profileUrls   String ?
  company_id    String
  famer_attached_contract_url   String ?
  company       Company @relation(fields: [company_id], references: [id])
  status        UserStatus
  projectAudit  Project_audit[]
  farm          Farm[] 
  receipt       Receipt?
  market_audit  Market_audit[]
  training_audits Company_training_audit[]
}

model Company {
  id  String @id @default(cuid())
  name  String
  slug  String
  country String
  email  String @unique
  logo  String @unique

  payment_mode String ?
  company_paypal_email String ?
  // the choice of paypal_id is a design decision. we would have chose to use the subscription_status boolean.
  paypal_id String ?
  sector_of_activity String 
  website  String ?
  address  String 

  phone_number  String
  city  String
  description String

  timezone String @default("UTC")

// the case where the company account will be deactivate
  status CompanyStatus ?
  users  User[]
  projects Project[]
  campaign Company_Campaign[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  trainings Training[]
  subscription Subscription[]
  markets Market[]
  
}

model Project {
  id  String @id @default(cuid())
  type TypeProject
  slug  String

  company_id   String
  title  String
  description  String
  sector_activity String
  country  String
  status ProjectStatus @default(DRAFT)
  state String
  city String
  start_date  DateTime
  end_date  DateTime
  project_structure Json    @default("{}")  @db.JsonB

  // archived Boolean @default(false) 
  // draft Boolean @default(false)
  projectAudit Project_audit[]
  Company     Company @relation(fields: [company_id], references: [id])
  
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  deleted_at DateTime @updatedAt
  archived_at DateTime @updatedAt
  draft_at DateTime @updatedAt
  deployed_at DateTime @updatedAt
}

model Campaign {
  id  String @id @default(cuid())
  name  String
  description  String

  start_date  DateTime
  end_date  DateTime
  companies Company_Campaign[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  stockCampaigns Campaign_stock[]
}

model Company_Campaign {
  id       String @id @default(cuid())
  campaign_id  String
  company_id   String
  Campaign     Campaign @relation(fields: [campaign_id], references: [id])
  Company     Company @relation(fields: [company_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

}

model Campaign_stock {
  id  String @id @default(cuid())
  quantity  Int
  weight  Int
  unit_of_mesure String
  campaign_id  String
  company_id   String

  projectId   Campaign @relation(fields: [campaign_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Collector_agent {
  id String @id @default(cuid())
  name String
  code String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  companyId String
}

model Inspection_data {
  id String @id @default(cuid())
  project_id String
  collected_by String
  project_data_url String

  project_data   Json ?  @default("{}")  @db.JsonB
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  collected_at DateTime @default(now())
}

model training_session {
  id String @id @default(cuid())
  first_name String
  last_name String
  email String
  phone String
  role String

  signature String
  report_url String
  trainer_proof_of_competency String[]
  training_picture_url String[]
  training_attendance_sheet_urls String[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  training_id String
  training Training @relation(fields: [training_id], references: [id])
}

model Training {
  id String @id @default(cuid())
  location String
 
  title String
  slug String
  modules String[]
  start_date DateTime

  end_date DateTime
  company_id  String
 
  company Company @relation(fields: [company_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  training_session training_session[]
  training_audits Company_training_audit[]
}

model Project_audit {
  id String @id @default(cuid())
  project_id String
  user_id String
  type_of_project TypeProject
  user User @relation(fields: [user_id], references: [id])
  project Project @relation(fields: [project_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Farm {
  id String @id @default(cuid())
  location Json ?  @default("{}")  @db.JsonB
  farmer_id String 

  village String
  creation_date DateTime
  division String
  council String
  farm_image_url String
  user User @relation(fields: [farmer_id], references: [id])
  
  mapping_coodinates Farm_coordinates[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

//TODO: check the real data structure to store the geoPoints.
model Farm_coordinates{
  id String @id @default(cuid())
  estimate_area Float

  mapping_date DateTime
  farm_id String
  located_at Json ?  @default("{}")  @db.JsonB

  coordinates Json ?  @default("{}")  @db.JsonB
  collected_by String
  farm Farm @relation(fields: [farm_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Subscription {
  id                      String @id @default(cuid())
  plan_id                String
  company_id              String

  start_date              DateTime
  end_date                DateTime
  status                  SubscriptionStatus   @default(INACTIVE)

  payment_mode            String
  last_notification_date       DateTime ? @updatedAt

  grace_period_end DateTime @updatedAt

  company              Company @relation(fields: [company_id], references: [id])
  price                Price_plan @relation(fields: [plan_id], references: [id])
  created_at           DateTime @default(now())
  updated_at           DateTime @updatedAt
}

model Price_plan {
  id                 String @id @default(cuid())
  active             Boolean
  status             PlanStatus   @default(OFF)
  price              String
  currency           String
  
  product_name       ProductName @default(BRONZE) @unique
  price_type         String    @default("Fixed pricing")
  plan_name          String    @unique
  description        String
  billing_cycle      String @default("Every 1 year")
  number_of_billing_cycles String ?  @default("Unlimited")
  auto_renewal       Boolean


  cancellation_policy String[]
  subscription Subscription[]

  price_plan_requirement Price_plan_requirement[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}


model Requirement {
  id String @id @default(cuid())
  name String
  content Json ?  @default("{}")  @db.JsonB
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  price_plan_requirement Price_plan_requirement[]
  // required_norm String
  // number_of_requirements Int
  // number_of_applicable_requirements Int
  // number_of_non_appplicable_requirements Int 
  // percentage_applicable Int
}

model Price_plan_requirement {
  id String @id @default(cuid())
  req_id String
   price_plan_id String
  requirement Requirement @relation(fields: [req_id], references: [id])
  price_plan Price_plan @relation(fields: [ price_plan_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([req_id,  price_plan_id])
}

model Market_audit {
  id String @id @default(cuid())
  user_id String
  market_id String
  user User @relation(fields: [user_id], references: [id])
  market Market @relation(fields: [market_id], references: [id])
  date DateTime
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Market {
  id String @id @default(cuid())
  company_id String
  start_date DateTime
  end_date DateTime
  market_number Int

  description String
  location String
  market_type String
  bordereau_vente_url String
  bon_entree_magazin_url String

  
  company Company @relation(fields: [company_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  market_audit Market_audit[]
  transaction Transaction[]
  receipts Receipt[]
}

model Receipt {
  id String @id @default(cuid())
  market_id String
  village String
  farmer_id String @unique

 date DateTime 
  net_weight_in_kg Float
  quantity_in_bags Int
  humidity_level_of_product String
  net_weight_for_sale Int
  refraction_humidity_or_quality String
  unit_amount_per_kg Float
  total_amount Float
  currency String

  farmer_picture_urls String[]
  statutory_prerequisite Int 
  net_paid Int 
  farmer_signature String
  company_signature String

  receipt_number String
  product_name String


  user User @relation(fields: [farmer_id], references: [id])
  market Market @relation(fields: [market_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Transaction {
  id String @id @default(cuid())
  market_id String
  date DateTime @default(now())


  level_of_traceability String
  driver_name String
  quantity Int 
  humidity Int
  net_weight_declared_in_Ton Float

  humidity_level_of_product String?
  total_quantity_in_bags Int 
  receiver_name String
  // TODO: cross check the importance of these signatures 
  sender_signature String
  driver_signature String
  product_quality String
  vehicule_immatriculation_number String
  min_com_verif_agent_name_and_sig String

  market Market @relation(fields: [market_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Company_training_audit {
  id String @id @default(cuid())
  user_id String
  user User @relation(fields: [user_id], references: [id])
  training_id String
  training Training @relation(fields: [training_id], references: [id])
}
