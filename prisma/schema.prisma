generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                          String     @id @default(cuid())
  username                    String?
  email                       String?    @unique
  password                    String?
  role                        Role       @default(PDG)
  first_name                  String
  last_name                   String?
  phone_number                String?
  created_at                  DateTime   @default(now())
  updated_at                  DateTime   @updatedAt
  profileUrls                 String?
  company_id                  String
  famer_attached_contract_url String?
  status                      UserStatus
  company                     Company    @relation(fields: [company_id], references: [id])

  @@index([id, email, phone_number])
}

model Company {
  id                   String             @id @default(cuid())
  name                 String
  slug                 String?
  country              String
  email                String             @unique
  logo                 String?
  head_office_email    String
  payment_mode         String?
  company_paypal_email String?
  paypal_id            String?
  sector_of_activity   String
  website              String?
  address              String
  phone_number         String
  city                 String
  description          String
  region               String
  company_bucket       String ?
  timezone             String             @default("UTC")
  status               CompanyStatus?     @default(INACTIVE)
  created_at           DateTime           @default(now())
  updated_at           DateTime           @updatedAt
  campaigns            Company_Campaign[]
  markets              Market[]
  projects             Project[]
  subscription         Subscription[]
  trainings            Training[]
  users                User[]

  @@index([id, status, email])
}

model Statistics {
  id              String @id @default(cuid())
  company_id      String
  campaign_id     String
  project_id      String
  project_type    String
  total_drafts    Int
  total_archiveds Int
  total_deployeds Int
}

model Assignee {
  id           String   @id @default(cuid())
  agentCode    String   @unique
  projectCodes String[]
  company_id   String
  fullName     String?
  project_type String?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  deleted_at   DateTime @updatedAt

  @@index([id, projectCodes, company_id])
}

model Project {
  id                String        @id @default(cuid())
  type              TypeProject
  slug              String
  campaign_id       String
  company_id        String
  title             String
  description       String
  sector_activity   String
  country           String
  status            ProjectStatus @default(DRAFT)
  region            String
  city              String
  start_date        DateTime
  end_date          DateTime
  project_structure Json          @default("{}")
  another_logo      String?
  code              String        @unique
  updated_at        DateTime      @updatedAt
  deleted_at        DateTime      @updatedAt
  archived_at       DateTime      @updatedAt
  draft_at          DateTime      @default(now())
  deployed_at       DateTime
  Company           Company       @relation(fields: [company_id], references: [id])

  @@index([id, company_id, start_date, end_date, sector_activity, type, code])
}

model Project_audit {
  id                String            @id @default(cuid())
  project_id        String
  user_id           String
  type_of_project   TypeProject
  invited_by        String?
  invitation_status InvitationStatus? @default(NOT_CONFIRMED)
  action            ProjectStatus?    @default(DRAFT)
  created_at        DateTime          @default(now())
  updated_at        DateTime          @updatedAt
}

model Campaign {
  id          String             @id @default(cuid())
  name        String             @unique
  description String
  start_date  DateTime
  end_date    DateTime
  status      CampaignStatus     @default(CLOSED)
  created_at  DateTime           @default(now())
  updated_at  DateTime           @updatedAt
  companies   Company_Campaign[]

  @@index([id, start_date, end_date, status])
}

model Company_Campaign {
  id          String   @id @default(cuid())
  campaign_id String
  company_id  String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  Campaign    Campaign @relation(fields: [campaign_id], references: [id])
  Company     Company  @relation(fields: [company_id], references: [id])
}

model Collector_agent {
  id           String   @id @default(cuid())
  name         String
  company_id   String
  project_code String
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
}

model Inspection_data {
  id           String   @id @default(cuid())
  project_id   String
  project_data Json?    @default("{}")
  updated_at   DateTime @updatedAt
  collected_at DateTime @default(now())

  @@index([project_id])
}

model Farmer {
  id                        String              @id @default(cuid())
  company_id                String
  farmer_name               String
  farmer_contact            String
  council                   String
  farmer_ID_card_number     String              @unique
  inspection_date           String
  village                   String
  certification_year        String
  inspector_name            String
  inspector_contact         String
  weed_application          String
  weed_application_quantity Int
  pesticide_used            String
  status                    SubscriptionStatus? @default(ACTIVE)
  pesticide_quantity        Int
  farmer_photos             String[]
  created_at                DateTime            @default(now())
  updated_at                DateTime            @updatedAt
  farm                      Farm[]
  receipts                  Receipt[]

  @@index([id, farmer_ID_card_number, farmer_contact, council])
}

model Farm {
  id                       String             @id @default(cuid())
  location                 Json?              @default("{}")
  farmer_id                String
  village                  String
  plantation_creation_date DateTime
  farm_image_url           String?
  estimate_area            Float
  plantation_photos        String[]
  created_at               DateTime           @default(now())
  updated_at               DateTime           @updatedAt
  Farmer                   Farmer             @relation(fields: [farmer_id], references: [id])
  mapping_coodinates       Farm_coordinates[]

  @@index([farmer_id, location])
}

model Farm_coordinates {
  id             String   @id @default(cuid())
  farm_id        String
  coordinates    Json?    @default("{}")
  collector_name String
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  farm           Farm     @relation(fields: [farm_id], references: [id])

  @@index([farm_id])
}

model Attendance_sheet {
  id           String         @id @default(cuid())
  date         String
  title        String
  modules      String[]
  trainers     Json           @default("[{}]")
  location     String
  report_url   String
  photos       String[]
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  training_id  String
  training     Training       @relation(fields: [training_id], references: [id])
  participants Participants[]
}

model Participants {
  id                  String           @id @default(cuid())
  attendence_sheet_id String
  name                String
  organization        String?
  telephone           String
  email               String
  signature           String
  village             String
  attendence_sheet    Attendance_sheet @relation(fields: [attendence_sheet_id], references: [id])
}

model Training {
  id               String             @id @default(cuid())
  location         String
  title            String
  slug             String?
  modules          String[]
  start_date       DateTime
  code             String             @unique
  end_date         DateTime
  status           ProjectStatus      @default(DRAFT)
  company_id       String
  created_at       DateTime           @default(now())
  updated_at       DateTime           @updatedAt
  deleted_at       DateTime           @updatedAt
  archived_at      DateTime           @updatedAt
  draft_at         DateTime           @default(now())
  deployed_at      DateTime
  training_session Attendance_sheet[]
  company          Company            @relation(fields: [company_id], references: [id])

  @@index([company_id, start_date, end_date, title, id])
}

model Subscription {
  id                     String             @id @default(cuid())
  plan_id                String
  company_id             String
  start_date             DateTime
  end_date               DateTime
  status                 SubscriptionStatus @default(INACTIVE)
  payment_mode           String
  last_notification_date DateTime?          @updatedAt
  grace_period_end       DateTime?          @updatedAt
  created_at             DateTime           @default(now())
  updated_at             DateTime           @updatedAt
  company                Company            @relation(fields: [company_id], references: [id])
  price                  Price_plan         @relation(fields: [plan_id], references: [id])

  @@index([company_id, plan_id, status, id])
}

model Price_plan {
  id                       String         @id @default(cuid())
  active                   Boolean
  status                   PlanStatus     @default(OFF)
  price                    String
  currency                 String
  product_name             ProductName    @unique @default(BRONZE)
  price_type               String         @default("Fixed pricing")
  plan_name                String         @unique
  description              String
  billing_cycle            String         @default("Every 1 year")
  number_of_billing_cycles String?        @default("Unlimited")
  auto_renewal             Boolean
  cancellation_policy      String[]
  created_at               DateTime       @default(now())
  updated_at               DateTime       @updatedAt
  subscription             Subscription[]

  @@index([product_name, id, plan_name, status])
}

model Market {
  id                     String         @id @default(cuid())
  company_id             String
  start_date             DateTime
  end_date               DateTime
  price_of_theday        Int
  supplier               String
  description            String
  location               String
  campaign_id            String
  type_of_market         MarketType     @default(COCOA)
  bordereau_vente_url    String?
  bon_entree_magazin_url String?
  accompanying_url       String?
  transmission_url       String?
  product_quantity       Float?
  status                 CampaignStatus @default(OPEN)
  code                   String?        @unique
  created_at             DateTime       @default(now())
  updated_at             DateTime       @updatedAt
  company                Company        @relation(fields: [company_id], references: [id])
  receipts               Receipt[]
  transaction            Transaction[]

  @@index([company_id, start_date, end_date, code, status, id])
}

model Receipt {
  id               String   @id @default(cuid())
  market_id        String
  village          String
  farmer_id        String
  date             DateTime
  weight           String
  humidity         String
  net_weight       Int
  agent_name       String
  refraction       String
  price_per_kg     String
  total_price      Float
  currency         String
  salePhotoUrl     String[]
  agent_signature  String
  farmer_signature String
  gpsLocation      Json
  product_name     String
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  farmer           Farmer   @relation(fields: [farmer_id], references: [id])
  market           Market   @relation(fields: [market_id], references: [id])

  @@index([market_id, farmer_id, date, id])
}

model Transaction {
  id                              String   @id @default(cuid())
  market_number                   String    @unique
  sender_name                     String?
  receiver_name                   String?
  minister_agent_name             String?
  vehicule_immatriculation_number String?
  driver_name                     String?
  number_of_bags                  Float?
  product_quality                 String?
  date                            String
  date_transmission               DateTime  @default(now())
  sender_signature                String?
  driver_signature                String?
  minister_agent_signature        String? 

  level_of_traceability           String
  humidity                        Float
  declared_weight                 Float
              
  created_at                      DateTime @default(now())
  updated_at                      DateTime @updatedAt
  market                          Market   @relation(fields: [market_number], references: [id])
}

model Agriculture {
  id             String   @id @default(cuid())
  company_id     String
  activity_title String
  pictures_url   String[]
  documents_url  String[]
  pv_url         String[]
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
}

model Social {
  id             String   @id @default(cuid())
  company_id     String
  activity_title String
  pictures_url   String[]
  documents_url  String[]
  pv_url         String[]
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
}

model Environment {
  id             String   @id @default(cuid())
  company_id     String
  activity_title String
  pictures_url   String[]
  documents_url  String[]
  pv_url         String[]
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
}

model RevenuEtResponsabilitePartager {
  id                     String                           @id @default(cuid())
  company_id             String
  agreement_pv           String[]
  proof_of_expenses      String[]
  proof_of_paiement      String[]
  pv_url                 String[]
  first_buyer_proof      String[]
  producer_payment_proof String[]
  management_plan        String[]
  type                   IncomeAndShareResponsabilityType
  created_at             DateTime                         @default(now())
  updated_at             DateTime                         @updatedAt
}

enum Role {
  PDG
  EMPLOYEE
  AGENT
  ADG
  AUDITOR
  SALES
  IT_SUPPORT
}

enum ProjectStatus {
  DRAFT
  ARCHIVED
  ACTIVE
  DELETED
  DEPLOYED
}

enum TypeProject {
  INITIAL_INSPECTION
  INTERNAL_INSPECTION
  AUTO_EVALUATION
  MAPPING
  TRAINING
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BANNED
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
  SUSPENDED
  APPROVAL_PENDING
  EXPIRED
  GRACE_PERIOD
}

enum PaymentMethod {
  CARD
  PAYPAL
  E_CHEQUE
  CASH
  INSTANT_BANK_TRANSFER
}

enum ProductName {
  BRONZE
  SILVER
  GOLD
}

enum PlanStatus {
  ON
  OFF
  EXPIRED
}

enum CompanyStatus {
  ACTIVE
  INACTIVE
  EXPIRED
}

enum CampaignStatus {
  OPEN
  CLOSED
}

enum MarketType {
  COCOA
  COFFEE
  BANANA
  WOOD
  OTHER
}

enum InvitationStatus {
  CONFIRMED
  NOT_CONFIRMED
}

enum IncomeAndShareResponsabilityType {
  PAYMENT_JUSTIFICATION
  SUSTENABILITY_DIFFERENTIAL
  INVESTMENT_MANAGEMENT_PLAN
}
